name: Go Release

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  actions: read

jobs:
  release:
    if: contains(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Get current tag
        id: get_version
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current_tag=$TAG" >> $GITHUB_ENV

      - name: Calculate next tag
        id: calculate_tag
        run: |
          CURRENT_TAG="${{ env.current_tag }}"
          echo "Current Tag: $CURRENT_TAG"
          if [[ "$CURRENT_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            BASE_VERSION=$(echo "$CURRENT_TAG" | cut -d 'v' -f 2)
            MAJOR=$(echo "$BASE_VERSION" | cut -d '.' -f 1)
            MINOR=$(echo "$BASE_VERSION" | cut -d '.' -f 2)
            PATCH=$(echo "$BASE_VERSION" | cut -d '.' -f 3)
            NEXT_TAG="v$MAJOR.$MINOR.$((PATCH + 1))"
          else
            NEXT_TAG="v0.0.1"
          fi
          while git rev-parse "$NEXT_TAG" >/dev/null 2>&1; do
            PATCH=$(echo "$NEXT_TAG" | cut -d '.' -f 3)
            NEXT_TAG="v$MAJOR.$MINOR.$((PATCH + 1))"
          done
          echo "Final Next Tag: $NEXT_TAG"
          echo "tag=$NEXT_TAG" >> $GITHUB_ENV

      - name: Build for all platforms
        id: build
        run: |
          mkdir -p build
          platforms=("linux/amd64" "linux/arm64" "windows/amd64" "darwin/amd64" "darwin/arm64")
          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            EXTS=""
            if [[ "$GOOS" == "windows" ]]; then
              EXTS=".exe"
            fi
            output_name=build/${GITHUB_REPOSITORY##*/}_${GOOS}_${GOARCH}${EXTS}
            env GOOS=$GOOS GOARCH=$GOARCH go build -trimpath -ldflags="-s -w -buildid= -extldflags='-fno-PIC' -o=$output_name" -gcflags="all=-l -B -trimpath=" -v || echo "Failed to build for $platform"
          done

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          name: Release ${{ env.tag }}
          body: |
            **Full Changelog**: https://github.com/Sn0wo2/bilibilicomments/compare/${{ env.current_tag }}...${{ env.tag }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            build/*
