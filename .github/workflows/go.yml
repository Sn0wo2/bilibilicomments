name: Go Release

on:
  push:
    branches: ["main"]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all tags are fetched

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Get current tag
        id: get_version
        run: |
          TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
          echo "current_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Debug logs
        run: |
          git fetch --tags
          git tag
          git describe --tags --abbrev=0

      - name: Get current tag
        id: get_version
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [ "$TAG" == "0.0.0" ]; then
            echo "No tags found, defaulting to $TAG"
          else
            echo "Found tag: $TAG"
          fi
          echo "current_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Calculate next tag or use existing
        id: calculate_tag
        run: |
          CURRENT_TAG=${{ steps.get_version.outputs.current_tag || '0.0.0' }}
          NEXT_TAG=$(echo $CURRENT_TAG | awk -F. '{print $1 "." $2 "." ($3 + 1)}')
          while git tag -l "$NEXT_TAG"; do
            NEXT_TAG=$(echo $NEXT_TAG | awk -F. '{print $1 "." $2 "." ($3 + 1)}')
          done
          echo "tag=$NEXT_TAG" >> $GITHUB_OUTPUT

      - name: Create or Update Release
        id: create_or_update_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calculate_tag.outputs.tag }}
          name: Release ${{ steps.calculate_tag.outputs.tag }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            build/*
          append_body: true  # This allows you to append to the existing body if updating a release

      - name: Build for all platforms
        if: success()  # Ensure this only runs if there was no failure in release step
        run: |
          mkdir -p build
          platforms=("darwin/amd64" "darwin/arm64" "linux/amd64" "linux/arm64" "windows/amd64" "windows/arm64")
          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*} GOARCH=${platform#*/} go build -trimpath -ldflags="-s -w -buildid= -extldflags='-fno-PIC'" -gcflags="all=-l -B -trimpath=" -o build/${GITHUB_REPOSITORY##*/}_${platform%/*}_${platform#*/} -v
            tar -czvf build/${GITHUB_REPOSITORY##*/}_${platform%/*}_${platform#*/}.tar.gz -C build ${GITHUB_REPOSITORY##*/}_${platform%/*}_${platform#*/}
          done