name: Go Release

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      issues: read
      pull-requests: read

    outputs:
      tag: ${{ steps.calculate_next_tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Get current tag and calculate next tag
        id: get_version
        uses: "wyrihaximus/github-action-get-previous-tag@v1"
        with:
          fallback: "0.0.0"

      - name: Calculate next tag
        id: calculate_next_tag
        run: |
          NEXT_TAG=$(echo ${{ steps.get_version.outputs.tag }} | awk -F. '{print $1 "." $2 "." ($3 + 1)}')
          EXISTS=$(git tag -l "$NEXT_TAG")
          while [ -n "$EXISTS" ]; do
            NEXT_TAG=$(echo $NEXT_TAG | awk -F. '{print $1 "." $2 "." ($3 + 1)}')
            EXISTS=$(git tag -l "$NEXT_TAG")
          done
          echo "tag=$NEXT_TAG" >> $GITHUB_ENV

      - name: Build for all platforms
        run: |
          for os in darwin linux windows; do
            for arch in amd64 arm64; do
              GOOS=$os GOARCH=$arch go build -trimpath -ldflags="-s -w -buildid= -extldflags='-fno-PIC'" -gcflags="all=-l -B -trimpath=" -o ${GITHUB_REPOSITORY}_${os}_${arch} -v
              tar -czvf ${GITHUB_REPOSITORY}_${os}_${arch}.tar.gz ${GITHUB_REPOSITORY}_${os}_${arch}
            done
          done

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: Release ${{ env.tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.repository }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz
          asset_name: ${{ github.repository }}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip